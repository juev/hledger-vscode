name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile TypeScript
      run: npm run compile
    
    - name: Run tests
      run: npm test
    
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        # Validate semantic version format (x.y.z)
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version '$VERSION' is not in semantic version format (x.y.z)"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Update package.json version
      run: |
        npm version ${{ steps.extract_version.outputs.version }} --no-git-tag-version --allow-same-version
    
    - name: Package extension
      run: npx vsce package
    
    - name: Publish to Visual Studio Marketplace
      run: npx vsce publish -p ${{ secrets.VSCE_PAT }}
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
    
    - name: Generate release notes
      id: generate_notes
      run: |
        # Make script executable
        chmod +x .github/scripts/generate-release-notes.js
        # Generate release notes
        RELEASE_NOTES=$(node .github/scripts/generate-release-notes.js)
        # Handle multiline output for GitHub Actions
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: Release ${{ steps.extract_version.outputs.version }}
        body: ${{ steps.generate_notes.outputs.release_notes }}
        files: "*.vsix"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}